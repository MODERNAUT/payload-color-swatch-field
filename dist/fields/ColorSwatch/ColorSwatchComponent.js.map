{"version":3,"sources":["../../../src/fields/ColorSwatch/ColorSwatchComponent.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState, useCallback, Fragment } from \"react\";\n\nimport {\n  Button,\n  FieldLabel, // Re-use the built in Label component directly from Payload\n  useField,\n  useFieldProps,\n  usePreferences,\n} from \"@payloadcms/ui\";\n\nimport { TextFieldClientProps } from \"payload\";\n\n// Import the SCSS stylesheet\nimport \"../index.scss\";\n\n// A list of default colors to choose from (TO DO: Pull from DB, env or tailwind)\nconst defaultColors = [\n  null,\n  \"#0F0F0F\",\n  \"#9A9A9A\",\n  \"#F3F3F3\",\n  \"#FF6F76\",\n  \"#FDFFA4\",\n  \"#B2FFD6\",\n  \"#F3DDF3\",\n];\n\nconst baseClass = \"color-swatch-field\";\n\nconst preferenceKey = \"color-swatch-colors\";\n\ntype ColorSwatchProps = TextFieldClientProps;\n\nexport const ColorSwatchComponent: React.FC<ColorSwatchProps> = ({\n  field,\n  // fieldToUse,\n  // checkboxFieldPath: checkboxFieldPathFromProps,\n}) => {\n  const { label } = field;\n  const { path, readOnly: readOnlyFromProps } = useFieldProps();\n\n  const { value = \"\", setValue } = useField({\n    path,\n  });\n\n  const { getPreference, setPreference } = usePreferences();\n  const [colorOptions, setColorOptions] = useState(defaultColors);\n  const [isAdding, setIsAdding] = useState(false);\n  const [colorToAdd, setColorToAdd] = useState(\"\");\n\n  useEffect(() => {\n    const mergeColorsFromPreferences = async () => {\n      const colorPreferences = await getPreference<string[]>(preferenceKey);\n      if (\n        colorPreferences &&\n        colorPreferences !== undefined &&\n        colorPreferences.length != 0\n      ) {\n        // Add some checking to ensure at least the default colors are presented\n        setColorOptions(colorPreferences);\n      }\n    };\n    mergeColorsFromPreferences();\n  }, [getPreference, setColorOptions]);\n\n  const handleAddColor = useCallback(() => {\n    setIsAdding(false);\n    setValue(colorToAdd);\n\n    // prevent adding duplicates\n    if (colorOptions.indexOf(colorToAdd) > -1) return;\n\n    // Add the color\n    let newOptions = colorOptions;\n    newOptions.push(colorToAdd);\n\n    // Resetting the options (debugging)\n    // let newOptions = []\n\n    // update state with new colors\n    setColorOptions(newOptions);\n    // store the user color preferences for future use\n    setPreference(preferenceKey, newOptions);\n  }, [colorOptions, setPreference, colorToAdd, setIsAdding, setValue]);\n\n  // TO DO: Implement a handleRemoveColor option\n\n  return (\n    <div className={baseClass}>\n      <FieldLabel field={field} htmlFor={path} label={label} />\n\n      {isAdding && (\n        <div>\n          <input\n            className={`${baseClass}__input`}\n            type=\"text\"\n            placeholder=\"#000000\"\n            onChange={(e) => setColorToAdd(e.target.value)}\n            value={colorToAdd}\n          />\n          <Button\n            className={`${baseClass}__btn`}\n            buttonStyle=\"primary\"\n            iconPosition=\"left\"\n            iconStyle=\"with-border\"\n            size=\"small\"\n            onClick={handleAddColor}\n          >\n            Add\n          </Button>\n          <Button\n            className={`${baseClass}__btn`}\n            buttonStyle=\"secondary\"\n            iconPosition=\"left\"\n            iconStyle=\"with-border\"\n            size=\"small\"\n            onClick={() => setIsAdding(false)}\n          >\n            Cancel\n          </Button>\n        </div>\n      )}\n      {!isAdding && (\n        <Fragment>\n          <ul className={`${baseClass}__colors`}>\n            {colorOptions.map((color, i) => (\n              <li key={i}>\n                <button\n                  type=\"button\"\n                  key={color ? color : \"transparent\"}\n                  className={`chip ${!color ? \"no-color\" : \"\"} ${\n                    color === value ? \"chip--selected\" : \"\"\n                  } chip--clickable`}\n                  style={{ backgroundColor: color ? color : \"white\" }}\n                  onClick={() => setValue(color)}\n                />\n              </li>\n            ))}\n          </ul>\n          <Button\n            className=\"add-color\"\n            icon=\"plus\"\n            buttonStyle=\"icon-label\"\n            iconPosition=\"left\"\n            iconStyle=\"with-border\"\n            onClick={() => {\n              setIsAdding(true);\n              setValue(\"\");\n            }}\n          />\n        </Fragment>\n      )}\n    </div>\n  );\n};\n"],"names":["React","useEffect","useState","useCallback","Fragment","Button","FieldLabel","useField","useFieldProps","usePreferences","defaultColors","baseClass","preferenceKey","ColorSwatchComponent","field","label","path","readOnly","readOnlyFromProps","value","setValue","getPreference","setPreference","colorOptions","setColorOptions","isAdding","setIsAdding","colorToAdd","setColorToAdd","mergeColorsFromPreferences","colorPreferences","undefined","length","handleAddColor","indexOf","newOptions","push","div","className","htmlFor","input","type","placeholder","onChange","e","target","buttonStyle","iconPosition","iconStyle","size","onClick","ul","map","color","i","li","button","style","backgroundColor","icon"],"mappings":"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"}