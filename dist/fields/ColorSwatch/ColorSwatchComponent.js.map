{"version":3,"sources":["../../../src/fields/ColorSwatch/ColorSwatchComponent.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState, useCallback, Fragment } from \"react\";\n\nimport {\n  Button,\n  FieldLabel, // Re-use the built in Label component directly from Payload\n  useField,\n  useFieldProps,\n  usePreferences,\n} from \"@payloadcms/ui\";\n\nimport { TextFieldClientProps } from \"payload\";\n\nimport \"../styles-tailwind.css\"; // TO DO: Only load this if tailwind is enabled?\nimport \"../index.css\";\n\nconst baseClass = \"color-swatch-field\";\n\ntype ColorSwatchProps = {\n  readonly defaultColors: string[];\n  readonly lockDefaultColors: boolean;\n  readonly allowNull: boolean;\n  readonly allowUserPreferences: boolean;\n  readonly useGlobalPreferences: boolean;\n  readonly allowTailwindColors: boolean;\n  readonly tailwindColorWhitelist: string[];\n  readonly allowHexColors: boolean;\n} & TextFieldClientProps;\n\nconst isTailwindColor = (\n  color: string,\n  tailwindColorWhitelist: string[]\n): boolean => {\n  return (\n    color && // Check to ensure it isn't null\n    tailwindColorWhitelist.includes(color)\n  );\n};\n\nexport const ColorSwatchComponent: React.FC<ColorSwatchProps> = ({\n  defaultColors,\n  lockDefaultColors,\n  allowNull,\n  allowUserPreferences,\n  useGlobalPreferences,\n  allowTailwindColors,\n  tailwindColorWhitelist,\n  allowHexColors,\n  field,\n}) => {\n  const { label } = field;\n  const { path, readOnly: readOnlyFromProps } = useFieldProps();\n\n  const { value = \"\", setValue } = useField({ path });\n\n  const defaultPreferenceKey = useGlobalPreferences\n    ? \"default-color-swatch-colors\"\n    : field.name + \"-default-color-swatch-colors\";\n  const customPreferenceKey = useGlobalPreferences\n    ? \"custom-color-swatch-colors\"\n    : field.name + \"-custom-color-swatch-colors\";\n\n  const { getPreference, setPreference } = usePreferences();\n\n  const [defaultColorOptions, setDefaultColorOptions] = useState([\n    allowNull && null, // default options will include an array of null (if configured)\n    ...defaultColors.filter((element: string) => {\n      // Filter any user input to ensure they're proper values\n      return (\n        (allowHexColors && element.startsWith(\"#\")) || // If hex value\n        (allowTailwindColors &&\n          isTailwindColor(element, tailwindColorWhitelist)) // If a tailwind color\n      );\n    }),\n  ]);\n  const [customColorOptions, setCustomColorOptions] = useState([]);\n\n  const [isAdding, setIsAdding] = useState(false);\n  const [colorToAdd, setColorToAdd] = useState(\"\");\n  const [selectedTailwindColor, setSelectedTailwindColor] = useState(\"\");\n\n  useEffect(() => {\n    if (allowUserPreferences) {\n      // If custom colors are allowed, then get the user's color preferences\n      const getColorPreferences = async () => {\n        if (!lockDefaultColors) {\n          const defaultColorPreferences =\n            await getPreference<string[]>(defaultPreferenceKey);\n\n          if (\n            defaultColorPreferences &&\n            defaultColorPreferences !== undefined &&\n            defaultColorPreferences.length != 0\n          ) {\n            setDefaultColorOptions(defaultColorPreferences);\n          }\n        }\n\n        const customColorPreferences =\n          await getPreference<string[]>(customPreferenceKey);\n\n        if (\n          customColorPreferences &&\n          customColorPreferences !== undefined &&\n          customColorPreferences.length != 0\n        ) {\n          setCustomColorOptions(customColorPreferences);\n        }\n      };\n\n      getColorPreferences();\n    }\n  }, []);\n\n  const handleAddColor = useCallback(() => {\n    // This can only run when 'allowUserPreferences' is true\n    setIsAdding(false);\n    setValue(colorToAdd);\n\n    // Prevent adding duplicates\n    if (customColorOptions.indexOf(colorToAdd) > -1) return;\n\n    // Add the color\n    let newOptions = customColorOptions;\n    newOptions.push(colorToAdd);\n\n    // Update state with new colors\n    setCustomColorOptions(newOptions);\n\n    // Store the user color preferences for future use\n    setPreference(customPreferenceKey, newOptions);\n  }, [value, colorToAdd, customColorOptions, setPreference]);\n\n  const handleRemoveColor = useCallback(() => {\n    if (!lockDefaultColors && defaultColorOptions.includes(value as string)) {\n      // Remove the color\n      let newOptions = defaultColorOptions.filter((color) => {\n        return color !== value;\n      });\n\n      // Update state with new colors\n      setDefaultColorOptions(newOptions);\n\n      // Store the user color preferences for future use\n      setPreference(defaultPreferenceKey, newOptions);\n    } else {\n      // Remove the color\n      let newOptions = customColorOptions.filter((color) => {\n        return color !== value;\n      });\n\n      // Update state with new colors\n      setCustomColorOptions(newOptions);\n\n      // Store the user color preferences for future use\n      setPreference(customPreferenceKey, newOptions);\n    }\n\n    setValue(\"\");\n  }, [value, defaultColorOptions, customColorOptions, setPreference]);\n\n  return (\n    <div className={baseClass}>\n      <FieldLabel field={field} htmlFor={path} label={label} />\n\n      {isAdding && (\n        <div>\n          {allowTailwindColors && (\n            <>\n              <select\n                value={selectedTailwindColor}\n                onChange={(e) => {\n                  setSelectedTailwindColor(e.target.value);\n                  setColorToAdd(e.target.value);\n                }}\n              >\n                <option value=\"\" key=\"tailwind-colors-all\">\n                  Tailwind color\n                </option>\n                {tailwindColorWhitelist.map((color, i) => (\n                  <option value={color} key={i} className={color}>\n                    {color}\n                  </option>\n                ))}\n              </select>\n              &nbsp;\n            </>\n          )}\n          {allowHexColors && (\n            <input\n              className={`${baseClass}__input`}\n              type=\"text\"\n              placeholder=\"#000000\"\n              onChange={(e) => {\n                setSelectedTailwindColor(\"\");\n                setColorToAdd(e.target.value);\n              }}\n              value={colorToAdd}\n            />\n          )}\n          <br />\n          <Button\n            className={`${baseClass}__btn`}\n            buttonStyle=\"primary\"\n            iconPosition=\"left\"\n            iconStyle=\"with-border\"\n            size=\"small\"\n            onClick={handleAddColor}\n          >\n            Add\n          </Button>\n          &nbsp;\n          <Button\n            className={`${baseClass}__btn`}\n            buttonStyle=\"secondary\"\n            iconPosition=\"left\"\n            iconStyle=\"with-border\"\n            size=\"small\"\n            onClick={() => setIsAdding(false)}\n          >\n            Cancel\n          </Button>\n        </div>\n      )}\n      {!isAdding && (\n        <Fragment>\n          <ul className={`${baseClass}__colors`}>\n            {defaultColorOptions.map((color, i) => (\n              <li key={i} className={`${baseClass}__color-default`}>\n                <button\n                  type=\"button\"\n                  key={color ? color : \"transparent\"}\n                  className={`chip ${!color ? \"no-color\" : \"\"} ${\n                    color === value ? \"chip--selected\" : \"\"\n                  } ${\n                    color &&\n                    isTailwindColor(color, tailwindColorWhitelist) &&\n                    color\n                  } chip--clickable`}\n                  style={\n                    // Hex values should be inline background\n                    {\n                      backgroundColor: color && color.startsWith(\"#\") && color,\n                    }\n                  }\n                  onClick={() => setValue(color)}\n                  title={color && color}\n                >\n                  {\n                    color &&\n                      !color.startsWith(\"#\") &&\n                      String.fromCharCode(65 + i) + String.fromCharCode(97 + i) // Generate Alphanumeric text\n                  }\n                </button>\n              </li>\n            ))}\n            {allowUserPreferences && customColorOptions.length > 0 && (\n              <>\n                <li className={`${baseClass}__color-custom-separator`}></li>\n                {customColorOptions.map((color, i) => (\n                  <li key={i} className={`${baseClass}__color-custom`}>\n                    <button\n                      type=\"button\"\n                      key={color ? color : \"transparent\"}\n                      className={`chip ${!color ? \"no-color\" : \"\"} ${\n                        color === value ? \"chip--selected\" : \"\"\n                      } ${\n                        color &&\n                        isTailwindColor(color, tailwindColorWhitelist) &&\n                        color\n                      } chip--clickable`}\n                      style={\n                        // Hex values should be inline background\n                        {\n                          backgroundColor:\n                            color && color.startsWith(\"#\") && color,\n                        }\n                      }\n                      onClick={() => setValue(color)}\n                      title={color && color}\n                    >\n                      {color &&\n                        !color.startsWith(\"#\") &&\n                        String.fromCharCode(\n                          // Generate Alphanumeric text\n                          65 + i + defaultColorOptions.length + 1\n                        ) +\n                          String.fromCharCode(\n                            97 + i + defaultColorOptions.length + 1\n                          )}\n                    </button>\n                  </li>\n                ))}\n              </>\n            )}\n          </ul>\n          {allowUserPreferences && (\n            <Button\n              className=\"add-color\"\n              icon=\"plus\"\n              tooltip=\"Add color\"\n              buttonStyle=\"icon-label\"\n              iconPosition=\"left\"\n              iconStyle=\"with-border\"\n              onClick={() => {\n                setIsAdding(true);\n                setValue(\"\");\n              }}\n            />\n          )}\n          {value && // Display remove color button\n            allowUserPreferences && // If custom colors are allowed\n            ((lockDefaultColors && !defaultColors.includes(value as string)) || // If value isn't in default colors, and default colors are locked\n              !lockDefaultColors) && (\n              <Button\n                className=\"remove-color\"\n                icon=\"x\"\n                tooltip=\"Remove color\"\n                buttonStyle=\"icon-label\"\n                iconPosition=\"left\"\n                iconStyle=\"with-border\"\n                onClick={handleRemoveColor}\n              />\n            )}\n        </Fragment>\n      )}\n    </div>\n  );\n};\n"],"names":["React","useEffect","useState","useCallback","Fragment","Button","FieldLabel","useField","useFieldProps","usePreferences","baseClass","isTailwindColor","color","tailwindColorWhitelist","includes","ColorSwatchComponent","defaultColors","lockDefaultColors","allowNull","allowUserPreferences","useGlobalPreferences","allowTailwindColors","allowHexColors","field","label","path","readOnly","readOnlyFromProps","value","setValue","defaultPreferenceKey","name","customPreferenceKey","getPreference","setPreference","defaultColorOptions","setDefaultColorOptions","filter","element","startsWith","customColorOptions","setCustomColorOptions","isAdding","setIsAdding","colorToAdd","setColorToAdd","selectedTailwindColor","setSelectedTailwindColor","getColorPreferences","defaultColorPreferences","undefined","length","customColorPreferences","handleAddColor","indexOf","newOptions","push","handleRemoveColor","div","className","htmlFor","select","onChange","e","target","option","map","i","input","type","placeholder","br","buttonStyle","iconPosition","iconStyle","size","onClick","ul","li","button","style","backgroundColor","title","String","fromCharCode","icon","tooltip"],"mappings":"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"}